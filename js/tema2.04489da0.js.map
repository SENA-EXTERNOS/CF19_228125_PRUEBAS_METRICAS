{"version":3,"sources":["webpack:///./src/assets/curso/temas/tema2/tema2-img-02.svg","webpack:///./src/assets/curso/temas/tema2/tema2-img-01.svg","webpack:///./src/assets/curso/temas/tema2/tema2-img-05.svg","webpack:///./src/assets/curso/temas/tema2/tema2-img-06.svg","webpack:///./src/assets/curso/temas/tema2/tema2-img-03.svg","webpack:///./src/assets/curso/temas/tema2/tema2-img-04.svg","webpack:///./src/views/Tema2.vue?90ea","webpack:///src/views/Tema2.vue","webpack:///./src/views/Tema2.vue?628a","webpack:///./src/views/Tema2.vue"],"names":["module","exports","render","_vm","this","_h","$createElement","_c","_self","staticClass","_m","attrs","_v","staticRenderFns","name","data","mounted","$nextTick","updated","$aosRefresh","component"],"mappings":"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","file":"js/tema2.04489da0.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/tema2-img-02.59740576.svg\";","module.exports = __webpack_public_path__ + \"img/tema2-img-01.404e0ccc.svg\";","module.exports = __webpack_public_path__ + \"img/tema2-img-05.e56c67db.svg\";","module.exports = __webpack_public_path__ + \"img/tema2-img-06.f736ba1b.svg\";","module.exports = __webpack_public_path__ + \"img/tema2-img-03.a4b56e66.svg\";","module.exports = __webpack_public_path__ + \"img/tema2-img-04.066eda05.svg\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"curso-main-container pb-3\"},[_c('BannerInterno'),_c('div',{staticClass:\"container tarjeta tarjeta--blanca p-4 p-md-5 mb-5\"},[_vm._m(0),_vm._m(1),_c('div',{staticClass:\"Acordion-02\"},[_c('AcordionA',{attrs:{\"tipo\":\"b\",\"clase-tarjeta\":\"tarjeta tarjeta--blanca\",\"data-aos\":\"fade-left\"}},[_c('div',{staticClass:\"row\",attrs:{\"titulo\":\"Basadas en la especificación\"}},[_c('div',{staticClass:\"col-md-12 mb-4 mb-md-0\"},[_c('p',{staticClass:\"mb-2\"},[_vm._v(\"Estas técnicas usan la especificación del sistema a probar para generar, usando algún tipo de algoritmo, casos de prueba, sin conocer la estructura interna de dicho sistema a probar. También llamadas pruebas de caja negra. La prueba de caja negra se refiere a un método o técnica de prueba en el que se le considera al \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" como una caja negra, sin preocuparse por los detalles de implementación, el conocimiento de la ruta interna y la estructura del código interno del \"),_c('em',[_vm._v(\"software\")]),_vm._v(\". Esta técnica de prueba se basa completamente en las especificaciones y requisitos del \"),_c('em',[_vm._v(\"software\")]),_vm._v(\". El enfoque de la prueba de caja negra está en la salida y las entradas del sistema de \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" en lugar del conocimiento interno del programa. \")]),_c('p',{staticClass:\"mb-2\"},[_vm._v(\"El sistema que se somete a este tipo de pruebas es el que se considera como la “caja negra”, que puede ser cualquier \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" como una base de datos, un sitio web o un sistema operativo, etc. Las pruebas de caja negra se centran en probar la funcionalidad completa del sistema, así como el comportamiento de este. \")]),_c('p',{staticClass:\"mb-2\"},[_vm._v(\"Esta técnica es fundamental durante las etapas del ciclo de vida de las pruebas de \"),_c('em',[_vm._v(\"software\")]),_vm._v(\", como las pruebas de regresión, la aceptación, la unidad, el sistema, la integración y el desarrollo de \"),_c('em',[_vm._v(\"software\")]),_vm._v(\".\")]),_c('div',{staticClass:\"row justify-content-center align-items-center mb-2\"},[_c('div',{staticClass:\"col-lg-7\"},[_c('div',{staticClass:\"crd-paleBlue mb-3\"},[_c('p',{staticClass:\"p-3\"},[_vm._v(\"Las técnicas de prueba de caja negra son beneficiosas para los usuarios finales que desean realizar la verificación del \"),_c('em',[_vm._v(\"software\")]),_vm._v(\". Las técnicas más destacadas dentro de estas son:\")])]),_c('ul',{staticClass:\"lista-ul--color\"},[_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"BVA o análisis de valor límite.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Partición de clases de equivalencia.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Pruebas de transición de estado.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Prueba de tabla de decisiones.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Prueba basada en grafos.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Técnica de adivinación de errores. \")])])]),_c('div',{staticClass:\"col-lg-5\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/tema2/tema2-img-01.svg\"),\"alt\":\"Texto que describa la imagen\"}})])]),_c('p',[_vm._v(\"Los tipos de prueba de caja negra pueden ser: funcional, de regresión y no funcional. \")])])]),_c('div',{staticClass:\"row\",attrs:{\"titulo\":\"Basadas en el código\"}},[_c('div',{staticClass:\"col-md-7 mb-4 mb-md-0\"},[_c('p',{staticClass:\"mb-2\"},[_vm._v(\"Estas técnicas se encargan de generar casos de prueba en función de un criterio de cobertura del código, que indicará cómo generar los casos de prueba, así como el criterio de parada, es decir, cuándo se debe parar de generar casos de prueba porque ya se ha alcanzado el nivel de cobertura del código esperado. Entre los criterios de cobertura existentes se encuentran:\")]),_c('ul',{staticClass:\"lista-ul--color\"},[_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Criterios basados en el flujo de control: los casos de prueba se generan basándose en el conocimiento de la estructura de control del programa a probar. A su vez, existen diferentes criterios de cobertura como son la cobertura de sentencias, la cobertura de ramas o decisiones, la cobertura de caminos, la cobertura de condiciones, la cobertura de condiciones/decisiones, o el criterio de cobertura de condición/decisión modificada, entre otros.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Criterios basados en el flujo de datos: los casos de prueba se generan basándose en el conocimiento de las operaciones que se realizan sobre las variables en el programa a probar. La idea principal es cubrir caminos del programa a probar en los que aparezca una determinada variable o variables. Para ello, se atiende a diferentes criterios basados en la definición de una variable, su uso, y el camino desde que se define una variable hasta que se usa. \")])])]),_c('div',{staticClass:\"col-md-5\"},[_c('figure',[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/tema2/tema2-img-02.svg\"),\"alt\":\"Texto que describa la imagen\"}})])])]),_c('div',{staticClass:\"row\",attrs:{\"titulo\":\"Basadas en errores\"}},[_c('div',{staticClass:\"col-md-7 mb-4 mb-md-0\"},[_c('p',{staticClass:\"mb-2\"},[_vm._v(\"Este tipo de técnicas de pruebas son basadas en el uso de casos de prueba especialmente diseñados para revelar fallos probables o predefinidos. Entre los que se encuentran:\")]),_c('ul',{staticClass:\"lista-ul--color\"},[_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Predicción de error: los casos de prueba se diseñan con la intención de “averiguar” qué defectos podrían estar presentes en el componente a probar, basándose únicamente en la experiencia de la persona que esté realizando las pruebas, por ejemplo, como resultado de los errores cometidos anteriormente o la historia de fallos descubiertos en proyectos anteriores.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Pruebas de mutación: un mutante es una versión ligeramente modificada (en tiempo de compilación o en tiempo de ejecución) del programa a probar, que difiere en un pequeño cambio sintáctico del programa original. Cada caso de prueba se ejecuta tanto con el código original como con cada uno de los mutantes generados, de tal forma que, si un caso de prueba funciona con el programa original, pero no con un mutante, identificando, por tanto, la diferencia entre ellos, dicho mutante se dice que ha sido “matado”.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Pruebas de inyección de fallos: la inyección de fallos es una técnica de pruebas que simula fallos en ciertas partes del código de un programa, con el objetivo de determinar si el sistema, con dicho fallo, se comporta de la manera adecuada al ser ejecutado.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_c('em',[_vm._v(\"Fuzzing\")]),_vm._v(\": son un tipo de técnicas de inyección de fallos, que consisten en usar datos inválidos, inesperados y aleatorios (llamados \"),_c('em',[_vm._v(\"fuzz\")]),_vm._v(\") como entrada a un sistema con el objetivo de forzar la ocurrencia de fallos. Hay dos aproximaciones principales para crear los casos de prueba: por mutaciones de muestras de datos existentes, o generando nuevos datos de entrada basados en modelos de la entrada del sistema.\")])])])]),_c('div',{staticClass:\"col-md-5\"},[_c('figure',[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/tema2/tema2-img-03.svg\"),\"alt\":\"Texto que describa la imagen\"}})])])]),_c('div',{staticClass:\"row\",attrs:{\"titulo\":\"Basadas en el uso\"}},[_c('div',{staticClass:\"col-md-7 mb-4 mb-md-0\"},[_c('p',[_vm._v(\"Las técnicas de pruebas basadas en el uso tratan de evaluar la fiabilidad del \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" cuando es utilizado de la misma forma que lo usan los usuarios finales en el entorno de producción, con la finalidad de que los defectos puedan aparecer antes de que sea usado por usuarios reales. La fiabilidad del \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" se define como la probabilidad de que un sistema \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" funcione correctamente sin que se produzca ningún fallo durante un intervalo de tiempo, bajo una serie de condiciones.\")])]),_c('div',{staticClass:\"col-md-5\"},[_c('figure',[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/tema2/tema2-img-04.svg\"),\"alt\":\"Texto que describa la imagen\"}})])])]),_c('div',{staticClass:\"row\",attrs:{\"titulo\":\"Basadas en la naturaleza de la aplicación\"}},[_c('div',{staticClass:\"col-md-7 mb-4 mb-md-0\"},[_c('p',{staticClass:\"mb-2\"},[_vm._v(\"Las técnicas de pruebas explicadas anteriormente pueden ser aplicadas a cualquier tipo de \"),_c('em',[_vm._v(\"software\")]),_vm._v(\". Sin embargo, existen técnicas de pruebas más específicas para realizar las pruebas de forma más eficiente y eficaz para algunos tipos de aplicaciones. Por ejemplo, es posible encontrar técnicas de pruebas específicas para los siguientes tipos de aplicaciones:\")]),_c('ul',{staticClass:\"lista-ul--color\"},[_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Aplicaciones orientadas a objetos: en las que se debe tratar con las características de este tipo de aplicaciones, como son la existencia de clases y objetos, abstracción, encapsulación, herencia o polimorfismo.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Interfaces gráficas de usuario (GUI): ya sea aplicaciones de escritorio o interfaces web. En este caso, se debe evaluar si la interfaz funciona de la manera esperada, teniendo en cuenta los elementos gráficos que se muestran y cómo éstos reaccionan ante las interacciones con los usuarios.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Aplicaciones web: en las que se deben evaluar diferentes criterios como son la funcionalidad, usabilidad, interfaz, rendimiento, seguridad, o accesibilidad de estas.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Programas concurrentes: los cuales suelen ser más difíciles de probar que los programas secuenciales, puesto que, al igual que ellos, las pruebas también deben ser ejecutadas concurrentemente, causando en muchos casos que los fallos encontrados no puedan ser reproducidos de manera determinista.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_vm._v(\"Sistemas en tiempo real: los cuales están sujetos a restricciones estrictas de tiempo, es decir, las operaciones deben producir una respuesta en un tiempo determinado.\")]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Sistemas de seguridad críticos: esto es, sistemas \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" cuyo fallo o mal funcionamiento puede perjudicar gravemente la vida, el medio ambiente o algún tipo de equipamiento.\")])])])]),_c('div',{staticClass:\"col-md-5\"},[_c('figure',[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/tema2/tema2-img-05.svg\"),\"alt\":\"Texto que describa la imagen\"}})])])]),_c('div',{staticClass:\"row\",attrs:{\"titulo\":\"Basadas en la finalidad de las mismas\"}},[_c('div',{staticClass:\"col-md-7 mb-4 mb-md-0\"},[_c('p',{staticClass:\"mb-2\"},[_vm._v(\"Las pruebas del \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" se llevan a cabo con la finalidad de realizar algún tipo de comprobación. Por un lado, los casos de prueba pueden ser diseñados para comprobar que las especificaciones funcionales se han implementado correctamente, pero también se pueden utilizar para comprobar otro tipo de aspectos más específicos, dando lugar a otros tipos de pruebas según su finalidad. Algunos ejemplos son los siguientes:\")]),_c('ul',{staticClass:\"lista-ul--color\"},[_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Instalación: comprueban que el \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" puede ser instalado en el entorno objetivo.\")])]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Pruebas de compatibilidad: comprueban que el \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" sigue funcionando con otras aplicaciones, sistemas operativos o entornos diferente al original.\")])]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Alpha o Beta \"),_c('em',[_vm._v(\"Tester\")]),_vm._v(\": el objetivo es que un grupo representativo de usuarios utilice el sistema antes de realizar su paso a la etapa en producción.\")])]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"De rendimiento: pruebas de carga, las pruebas de estrés o las pruebas de resistencia que evalúan la capacidad del sistema y los tiempos de respuesta ante una carga determinada o más allá de los límites para los que ha sido diseñado.\")])]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"De recuperación: comprueban el comportamiento del sistema cuando se produce algún tipo de “desastre”.\")])]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Usabilidad: evalúan cómo de fácil es para los usuarios finales usar y aprender a usar el \"),_c('em',[_vm._v(\"software\")]),_vm._v(\".\")])]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Accesibilidad: comprueban que el \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" es accesible, por ejemplo, para personas con visión reducida, audición reducida o movilidad reducida, entre otros aspectos.\")])]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Seguridad: comprueban la seguridad del sistema, por ejemplo, para protegerlo contra el acceso de usuarios no autorizados o el abuso de usuarios autorizados.\")])]),_c('li',[_c('i',{staticClass:\"fas fa-play\"}),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Regresión: comprueban que las modificaciones realizadas en el sistema no causen comportamientos indeseados en otras partes del \"),_c('em',[_vm._v(\"software\")]),_vm._v(\".\")])])])]),_c('div',{staticClass:\"col-md-5\"},[_c('figure',[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/tema2/tema2-img-06.svg\"),\"alt\":\"Texto que describa la imagen\"}})])])])])],1)])],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"titulo-principal color-acento-contenido\"},[_c('div',{staticClass:\"titulo-principal__numero\"},[_c('span',[_vm._v(\"2\")])]),_c('h1',[_vm._v(\"Técnicas de prueba\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',{staticClass:\"mb-4\"},[_vm._v(\"Los productos \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" deben ser probados para medir su calidad y que cumplan con las especificaciones planteadas iniciales o los cambios que se puedan realizar durante su proceso de desarrollo; las pruebas hacen parte del ciclo de desarrollo del \"),_c('em',[_vm._v(\"software\")]),_vm._v(\". A continuación, se abordan conceptos sobre las diferentes técnicas de pruebas:\")])}]\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\n.curso-main-container.pb-3\n  BannerInterno\n  .container.tarjeta.tarjeta--blanca.p-4.p-md-5.mb-5\n    .titulo-principal.color-acento-contenido\n      .titulo-principal__numero\n        span 2\n      h1 Técnicas de prueba\n\n    p.mb-4 Los productos #[em software] deben ser probados para medir su calidad y que cumplan con las especificaciones planteadas iniciales o los cambios que se puedan realizar durante su proceso de desarrollo; las pruebas hacen parte del ciclo de desarrollo del #[em software]. A continuación, se abordan conceptos sobre las diferentes técnicas de pruebas:\n\n    .Acordion-02\n      AcordionA(tipo=\"b\" clase-tarjeta=\"tarjeta tarjeta--blanca\")(data-aos=\"fade-left\") \n        .row(titulo=\"Basadas en la especificación\")\n          .col-md-12.mb-4.mb-md-0\n            p.mb-2 Estas técnicas usan la especificación del sistema a probar para generar, usando algún tipo de algoritmo, casos de prueba, sin conocer la estructura interna de dicho sistema a probar. También llamadas pruebas de caja negra. La prueba de caja negra se refiere a un método o técnica de prueba en el que se le considera al #[em software] como una caja negra, sin preocuparse por los detalles de implementación, el conocimiento de la ruta interna y la estructura del código interno del #[em software]. Esta técnica de prueba se basa completamente en las especificaciones y requisitos del #[em software]. El enfoque de la prueba de caja negra está en la salida y las entradas del sistema de #[em software] en lugar del conocimiento interno del programa. \n            p.mb-2 El sistema que se somete a este tipo de pruebas es el que se considera como la “caja negra”, que puede ser cualquier #[em software] como una base de datos, un sitio web o un sistema operativo, etc. Las pruebas de caja negra se centran en probar la funcionalidad completa del sistema, así como el comportamiento de este. \n            p.mb-2 Esta técnica es fundamental durante las etapas del ciclo de vida de las pruebas de #[em software], como las pruebas de regresión, la aceptación, la unidad, el sistema, la integración y el desarrollo de #[em software].\n            .row.justify-content-center.align-items-center.mb-2\n              .col-lg-7\n                .crd-paleBlue.mb-3\n                  p.p-3 Las técnicas de prueba de caja negra son beneficiosas para los usuarios finales que desean realizar la verificación del #[em software]. Las técnicas más destacadas dentro de estas son:\n                ul.lista-ul--color\n                  li \n                    i.fas.fa-play\n                    | BVA o análisis de valor límite.\n                  li\n                    i.fas.fa-play\n                    | Partición de clases de equivalencia.\n                  li\n                    i.fas.fa-play\n                    | Pruebas de transición de estado.\n                  li\n                    i.fas.fa-play\n                    | Prueba de tabla de decisiones.\n                  li\n                    i.fas.fa-play\n                    | Prueba basada en grafos.\n                  li\n                    i.fas.fa-play\n                    | Técnica de adivinación de errores.              \n\n              .col-lg-5      \n                img(src='@/assets/curso/temas/tema2/tema2-img-01.svg', alt='Texto que describa la imagen')\n            p Los tipos de prueba de caja negra pueden ser: funcional, de regresión y no funcional.    \n\n        .row(titulo=\"Basadas en el código\")\n          .col-md-7.mb-4.mb-md-0\n            p.mb-2 Estas técnicas se encargan de generar casos de prueba en función de un criterio de cobertura del código, que indicará cómo generar los casos de prueba, así como el criterio de parada, es decir, cuándo se debe parar de generar casos de prueba porque ya se ha alcanzado el nivel de cobertura del código esperado. Entre los criterios de cobertura existentes se encuentran:\n            ul.lista-ul--color\n              li \n                i.fas.fa-play\n                | Criterios basados en el flujo de control: los casos de prueba se generan basándose en el conocimiento de la estructura de control del programa a probar. A su vez, existen diferentes criterios de cobertura como son la cobertura de sentencias, la cobertura de ramas o decisiones, la cobertura de caminos, la cobertura de condiciones, la cobertura de condiciones/decisiones, o el criterio de cobertura de condición/decisión modificada, entre otros.\n              li \n                i.fas.fa-play\n                | Criterios basados en el flujo de datos: los casos de prueba se generan basándose en el conocimiento de las operaciones que se realizan sobre las variables en el programa a probar. La idea principal es cubrir caminos del programa a probar en los que aparezca una determinada variable o variables. Para ello, se atiende a diferentes criterios basados en la definición de una variable, su uso, y el camino desde que se define una variable hasta que se usa.           \n\n          .col-md-5\n            figure\n              img(src='@/assets/curso/temas/tema2/tema2-img-02.svg', alt='Texto que describa la imagen')\n        .row(titulo=\"Basadas en errores\")\n          .col-md-7.mb-4.mb-md-0\n            p.mb-2 Este tipo de técnicas de pruebas son basadas en el uso de casos de prueba especialmente diseñados para revelar fallos probables o predefinidos. Entre los que se encuentran:\n            ul.lista-ul--color\n              li \n                i.fas.fa-play\n                | Predicción de error: los casos de prueba se diseñan con la intención de “averiguar” qué defectos podrían estar presentes en el componente a probar, basándose únicamente en la experiencia de la persona que esté realizando las pruebas, por ejemplo, como resultado de los errores cometidos anteriormente o la historia de fallos descubiertos en proyectos anteriores.\n              li \n                i.fas.fa-play\n                | Pruebas de mutación: un mutante es una versión ligeramente modificada (en tiempo de compilación o en tiempo de ejecución) del programa a probar, que difiere en un pequeño cambio sintáctico del programa original. Cada caso de prueba se ejecuta tanto con el código original como con cada uno de los mutantes generados, de tal forma que, si un caso de prueba funciona con el programa original, pero no con un mutante, identificando, por tanto, la diferencia entre ellos, dicho mutante se dice que ha sido “matado”.\n              li \n                i.fas.fa-play\n                | Pruebas de inyección de fallos: la inyección de fallos es una técnica de pruebas que simula fallos en ciertas partes del código de un programa, con el objetivo de determinar si el sistema, con dicho fallo, se comporta de la manera adecuada al ser ejecutado.\n              li \n                i.fas.fa-play\n                p.mb-0 #[em Fuzzing]: son un tipo de técnicas de inyección de fallos, que consisten en usar datos inválidos, inesperados y aleatorios (llamados #[em fuzz]) como entrada a un sistema con el objetivo de forzar la ocurrencia de fallos. Hay dos aproximaciones principales para crear los casos de prueba: por mutaciones de muestras de datos existentes, o generando nuevos datos de entrada basados en modelos de la entrada del sistema.\n\n          .col-md-5\n            figure\n              img(src='@/assets/curso/temas/tema2/tema2-img-03.svg', alt='Texto que describa la imagen')\n\n        .row(titulo=\"Basadas en el uso\")\n          .col-md-7.mb-4.mb-md-0\n            p Las técnicas de pruebas basadas en el uso tratan de evaluar la fiabilidad del #[em software] cuando es utilizado de la misma forma que lo usan los usuarios finales en el entorno de producción, con la finalidad de que los defectos puedan aparecer antes de que sea usado por usuarios reales. La fiabilidad del #[em software] se define como la probabilidad de que un sistema #[em software] funcione correctamente sin que se produzca ningún fallo durante un intervalo de tiempo, bajo una serie de condiciones.\n        \n          .col-md-5\n            figure\n              img(src='@/assets/curso/temas/tema2/tema2-img-04.svg', alt='Texto que describa la imagen')\n        .row(titulo=\"Basadas en la naturaleza de la aplicación\")\n          .col-md-7.mb-4.mb-md-0\n            p.mb-2 Las técnicas de pruebas explicadas anteriormente pueden ser aplicadas a cualquier tipo de #[em software]. Sin embargo, existen técnicas de pruebas más específicas para realizar las pruebas de forma más eficiente y eficaz para algunos tipos de aplicaciones. Por ejemplo, es posible encontrar técnicas de pruebas específicas para los siguientes tipos de aplicaciones:\n            ul.lista-ul--color\n              li \n                i.fas.fa-play\n                | Aplicaciones orientadas a objetos: en las que se debe tratar con las características de este tipo de aplicaciones, como son la existencia de clases y objetos, abstracción, encapsulación, herencia o polimorfismo.\n              li \n                i.fas.fa-play\n                | Interfaces gráficas de usuario (GUI): ya sea aplicaciones de escritorio o interfaces web. En este caso, se debe evaluar si la interfaz funciona de la manera esperada, teniendo en cuenta los elementos gráficos que se muestran y cómo éstos reaccionan ante las interacciones con los usuarios.\n              li \n                i.fas.fa-play\n                | Aplicaciones web: en las que se deben evaluar diferentes criterios como son la funcionalidad, usabilidad, interfaz, rendimiento, seguridad, o accesibilidad de estas.\n              li \n                i.fas.fa-play\n                | Programas concurrentes: los cuales suelen ser más difíciles de probar que los programas secuenciales, puesto que, al igual que ellos, las pruebas también deben ser ejecutadas concurrentemente, causando en muchos casos que los fallos encontrados no puedan ser reproducidos de manera determinista.\n              li \n                i.fas.fa-play\n                | Sistemas en tiempo real: los cuales están sujetos a restricciones estrictas de tiempo, es decir, las operaciones deben producir una respuesta en un tiempo determinado.\n              li \n                i.fas.fa-play\n                p.mb-0 Sistemas de seguridad críticos: esto es, sistemas #[em software] cuyo fallo o mal funcionamiento puede perjudicar gravemente la vida, el medio ambiente o algún tipo de equipamiento.\n\n          .col-md-5\n            figure\n              img(src='@/assets/curso/temas/tema2/tema2-img-05.svg', alt='Texto que describa la imagen')\n        .row(titulo=\"Basadas en la finalidad de las mismas\")\n          .col-md-7.mb-4.mb-md-0\n            p.mb-2 Las pruebas del #[em software] se llevan a cabo con la finalidad de realizar algún tipo de comprobación. Por un lado, los casos de prueba pueden ser diseñados para comprobar que las especificaciones funcionales se han implementado correctamente, pero también se pueden utilizar para comprobar otro tipo de aspectos más específicos, dando lugar a otros tipos de pruebas según su finalidad. Algunos ejemplos son los siguientes:\n            ul.lista-ul--color\n              li \n                i.fas.fa-play\n                p.mb-0 Instalación: comprueban que el #[em software] puede ser instalado en el entorno objetivo.\n              li \n                i.fas.fa-play\n                p.mb-0 Pruebas de compatibilidad: comprueban que el #[em software] sigue funcionando con otras aplicaciones, sistemas operativos o entornos diferente al original.\n              li \n                i.fas.fa-play\n                p.mb-0 Alpha o Beta #[em Tester]: el objetivo es que un grupo representativo de usuarios utilice el sistema antes de realizar su paso a la etapa en producción.\n              li \n                i.fas.fa-play\n                p.mb-0 De rendimiento: pruebas de carga, las pruebas de estrés o las pruebas de resistencia que evalúan la capacidad del sistema y los tiempos de respuesta ante una carga determinada o más allá de los límites para los que ha sido diseñado.\n              li \n                i.fas.fa-play\n                p.mb-0 De recuperación: comprueban el comportamiento del sistema cuando se produce algún tipo de “desastre”.\n              li \n                i.fas.fa-play\n                p.mb-0 Usabilidad: evalúan cómo de fácil es para los usuarios finales usar y aprender a usar el #[em software].\n              li \n                i.fas.fa-play\n                p.mb-0 Accesibilidad: comprueban que el #[em software] es accesible, por ejemplo, para personas con visión reducida, audición reducida o movilidad reducida, entre otros aspectos.\n              li \n                i.fas.fa-play\n                p.mb-0 Seguridad: comprueban la seguridad del sistema, por ejemplo, para protegerlo contra el acceso de usuarios no autorizados o el abuso de usuarios autorizados.\n              li \n                i.fas.fa-play\n                p.mb-0 Regresión: comprueban que las modificaciones realizadas en el sistema no causen comportamientos indeseados en otras partes del #[em software].\n\n          .col-md-5\n            figure\n              img(src='@/assets/curso/temas/tema2/tema2-img-06.svg', alt='Texto que describa la imagen')                                                               \n\n</template>\n\n<script>\nexport default {\n  name: 'Tema2',\n  data: () => ({\n    // variables de vue\n  }),\n  mounted() {\n    this.$nextTick(() => {\n      this.$aosRefresh()\n    })\n  },\n  updated() {\n    this.$aosRefresh()\n  },\n}\n</script>\n\n<style lang=\"sass\"></style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--11-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tema2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--11-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tema2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Tema2.vue?vue&type=template&id=7d73ba3e&lang=pug&\"\nimport script from \"./Tema2.vue?vue&type=script&lang=js&\"\nexport * from \"./Tema2.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}